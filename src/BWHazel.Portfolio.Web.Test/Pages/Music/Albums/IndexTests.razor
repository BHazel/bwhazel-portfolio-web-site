@using Microsoft.Extensions.Configuration
@using BWHazel.Portfolio.Web.Models
@using BWHazel.Portfolio.Web.Models.Validators
@using BWHazel.Portfolio.Web.Pages.Music.Albums
@using BWHazel.Portfolio.Web.Services
@using FluentValidation

@inherits PortfolioTestContext

@inject NavigationManager NavigationManager

@code {
    /// <summary>
    /// Tests that the <see cref="Web.Pages.Music.Albums.Index"/> page renders the album grid when albums are present in configuration.
    /// </summary>
    [Fact]
    public void Index_WhenAlbumsExistInConfiguration_RendersGrid()
    {
        List<Album> albums =
        [
            new(
                "album-1",
                "Album 1",
                "Album Description 1",
                2021,
                "img/music/albums/album-1.jpg"),
            new(
                "album-2",
                "Album 2",
                "Album Description 2",
                2022,
                "img/music/albums/album-2.jpg")
        ];

        Dictionary<string, string?> albumConfiguration = new();
        for (int album = 0; album < albums.Count; album++)
        {
            albumConfiguration[$"Music:Albums:Works:{album}:AlbumId"] = albums[album].AlbumId;
            albumConfiguration[$"Music:Albums:Works:{album}:Title"] = albums[album].Title;
            albumConfiguration[$"Music:Albums:Works:{album}:Description"] = albums[album].Description;
            albumConfiguration[$"Music:Albums:Works:{album}:Year"] = albums[album].Year.ToString();
            albumConfiguration[$"Music:Albums:Works:{album}:ImagePath"] = albums[album].ImagePath;
        }
        
        IConfiguration configuration = new ConfigurationBuilder()
            .AddInMemoryCollection(albumConfiguration)
            .Build();
        
        this.Services.AddSingleton(configuration);
        this.Services.AddSingleton<IValidator<Album>, AlbumValidator>();
        this.Services.AddSingleton<AlbumService>();

        IRenderedFragment page = this.Render(@<Index />);

        IRenderedComponent<MudGrid> albumGrid = page.FindComponent<MudGrid>();
        IReadOnlyList<IRenderedComponent<MudCard>> albumCards = albumGrid.FindComponents<MudCard>();

        albumGrid.ShouldNotBeNull();
        albumCards.Count.ShouldBe(2);
        for (int albumCard = 0; albumCard < albumCards.Count; albumCard++)
        {
            IRenderedComponent<MudCard> albumCardComponent = albumCards[albumCard];
            albumCardComponent.MarkupMatches(@<MudCard Style="height: 100%">
                                                <MudCardMedia Image="@albums[albumCard].ImagePath" Height="344" Title="@albums[albumCard].Title" />
                                                <MudCardContent>
                                                    <MudText Typo="Typo.h6">@albums[albumCard].Title</MudText>
                                                    <MudText Typo="Typo.body1">@albums[albumCard].Description</MudText>
                                                </MudCardContent>
                                                <MudCardActions>
                                                    <MudButton Variant="Variant.Text"
                                                               Color="Color.Primary"
                                                               OnClick="@(() => this.NavigationManager.NavigateTo($"/Music/Albums/{albums[albumCard].AlbumId}"))">
                                                    More Info
                                                    </MudButton>
                                                </MudCardActions>
                                            </MudCard>);
        }
    }

    /// <summary>
    /// Tests that the <see cref="Web.Pages.Music.Albums.Index"/> page renders a warning alert when no albums are present in configuration.
    /// </summary>
    [Fact]
    public void Index_WhenNoAlbumsExistInConfiguration_RendersWarningAlert()
    {
        Dictionary<string, string?> albumConfiguration = new();
        IConfiguration configuration = new ConfigurationBuilder()
            .AddInMemoryCollection(albumConfiguration)
            .Build();
        
        this.Services.AddSingleton(configuration);
        this.Services.AddSingleton<IValidator<Album>, AlbumValidator>();
        this.Services.AddSingleton<AlbumService>();
        
        IRenderedFragment page = this.Render(@<Index />);
        
        IReadOnlyList<IRenderedComponent<MudAlert>> alerts = page.FindComponents<MudAlert>();
        
        alerts.ShouldNotBeNull();
        alerts.Count.ShouldBe(2);
        IRenderedComponent<MudAlert> warningAlert = alerts[1];
        warningAlert.MarkupMatches(@<MudAlert Severity="MudBlazor.Severity.Warning">
                                       No albums found.
                                   </MudAlert>);
    }
    
    /// <summary>
    /// Tests that the <see cref="Web.Pages.Music.Albums.Index"/> page renders an error alert when an error occurs while loading albums.
    /// </summary>
    [Fact]
    public void Index_WhenErrorOccursWhileLoadingAlbums_RendersErrorAlert()
    {
        Dictionary<string, string?> albumConfiguration = new()
        {
            ["Music:Albums:Works:0:AlbumId"] = null,
            ["Music:Albums:Works:0:Title"] = "Album 1",
            ["Music:Albums:Works:0:Description"] = "Album Description 1",
            ["Music:Albums:Works:0:Year"] = "2021",
            ["Music:Albums:Works:0:ImagePath"] = "img/music/albums/album-1.jpg"
        };
        
        IConfiguration configuration = new ConfigurationBuilder()
            .AddInMemoryCollection(albumConfiguration)
            .Build();
        
        this.Services.AddSingleton(configuration);
        this.Services.AddSingleton<IValidator<Album>, AlbumValidator>();
        this.Services.AddSingleton<AlbumService>();
        
        IRenderedFragment page = this.Render(@<Index />);
        
        IReadOnlyList<IRenderedComponent<MudAlert>> alerts = page.FindComponents<MudAlert>();
        
        alerts.ShouldNotBeNull();
        alerts.Count.ShouldBe(2);
        IRenderedComponent<MudAlert> errorAlert = alerts[1];
        errorAlert.MarkupMatches(@<MudAlert Severity="MudBlazor.Severity.Error">
                                     <strong>An error occurred while loading the albums:</strong><br />
                                     Album ID is required.
                                 </MudAlert>);
    }
}