@page "/Graphic-Design/Behance-Projects"

@using BWHazel.Portfolio.Web.Services

@inject BehanceProjectService BehanceProjectService

<PortfolioPageTitle Title="Behance Projects" />

<MudText GutterBottom="true" Typo="Typo.h3">Behance Projects</MudText>
<MudAlert Severity="Severity.Info">
    Click on a project to open it on the Behance web site.  More details on each creation, including tooling and methods where applicable, can be found there.
</MudAlert>
<br />

@if (this.behanceProjectIds.Any())
{
    <MudGrid>
        @foreach (int behanceProjectId in this.behanceProjectIds)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard Style="height: 100%">
                    <BehanceProject ProjectId="@behanceProjectId"></BehanceProject>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
else if (this.isError)
{
    <MudAlert Severity="Severity.Error">
        <strong>An error occurred while loading the Behance projects:</strong><br />
        @this.errorMessage
    </MudAlert>
}
else if (this.isLoaded)
{
    <MudAlert Severity="Severity.Warning">
        No Behance projects found.
    </MudAlert>
}
else
{
    <MudText Typo="Typo.body1">Loading...</MudText>
}

@code {
    private bool isLoaded = false;
    private bool isError = false;
    private string? errorMessage;
    private List<int> behanceProjectIds = [];
    
    /// <summary>
    /// Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            this.behanceProjectIds = this.BehanceProjectService.GetAllBehanceProjectIds();
        }
        catch (Exception exception)
        {
            this.isError = true;
            this.errorMessage = exception.Message;
        }
        finally
        {
            this.isLoaded = true;
        }
        
        await base.OnInitializedAsync();
    }
}